import os
import scipy.misc
import numpy as np
import cv2

from DR_GAN_model import DR_GAN
import tensorflow as tf

#new ones
#import os
import pandas as pd

flags = tf.app.flags
flags.DEFINE_boolean("return_img", True, "True for return img, False for feature and coefficient only, img is set ot 0")
flags.DEFINE_string("gpu", "0", "GPU to use [0]")
flags.DEFINE_string("input", "./img_in.png", "Path to input")
flags.DEFINE_string("output_prefix", "./out_", "Path to output")
FLAGS = flags.FLAGS


def main(_):
    gpu_options = tf.GPUOptions(visible_device_list =FLAGS.gpu, per_process_gpu_memory_fraction=0.5)
    dr_gan = DR_GAN(gpu_options = gpu_options)
    
    path = FLAGS.input
    if os.path.isfile(path):
        # Read image
        img = cv2.imread(path).astype(np.float32)
        img = cv2.resize(img,(96,96))
        rotated_image, feature, coefficient  = dr_gan.test(img, return_img = FLAGS.return_img)
    	
        print("+++++++++++++++++++++++\n")


        database = pd.DataFrame({'folder_id':[],'photo_id':[],'face_id':[],'feature':[],'coefficient':[]},dtype="int64")
        #traverse through all the images
        images_path = "/home/darealappu/Desktop/CDAC/DR-GAN tensorflow/vggface2_test/test"
        index=0
        for folder in os.listdir(images_path):
            folder_id = int(folder[1:])
            for image in os.listdir(os.path.join(images_path,folder)):
                photo_id = int(image[0:4])
                face_id = int(image[5:7])
                img = cv2.imread(os.path.join(images_path,folder,image)).astype(np.float32)
                img = cv2.resize(img,(96,96))
                rotated_image, feature, coefficient  = dr_gan.test(img, return_img = FLAGS.return_img)
                
                database=database.append({
                    'folder_id':folder_id,
                    'photo_id':photo_id,
                    'face_id':face_id,
                    'feature':feature,
                    'coefficient':coefficient},ignore_index=True)

                index+=1
                print(index)

                if index%10 == 0:
                	print()
                	break
        	if index >= 5000:
        		break


        print(database)
        database.to_csv('database.csv')
        database.to_pickle('database2.csv')

    	print("+++++++++++++++++++++++\n")


    elif os.path.isdir(path):
        # TO DO: remove pass
        pass
        # Read all images in the folder
        
        # Feed each image to the network

        # Save output as you need
        


if __name__ == '__main__':
    tf.app.run()
        # Feed to DR-GAN
